# =============================================================================
# Oasis Crypto Trade - Pre-commit Configuration
# =============================================================================
# Git hooks for code quality, security, and consistency
# 
# Install: pre-commit install
# Run: pre-commit run --all-files
# Update: pre-commit autoupdate
# =============================================================================

repos:
  # ==========================================================================
  # GENERAL CODE QUALITY
  # ==========================================================================
  
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File formatting and basic checks
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      
      # Python-specific checks
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--django]
      
      # Security checks
      - id: detect-aws-credentials
      - id: detect-private-key
      
      # File size and structure
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: forbid-new-submodules

  # ==========================================================================
  # PYTHON CODE FORMATTING
  # ==========================================================================
  
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: "Format Python code (Black)"
        language_version: python3.11
        args: [--line-length=88]
  
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: "Sort Python imports (isort)"
        args: [--profile=black, --line-length=88]

  # ==========================================================================
  # PYTHON CODE QUALITY & LINTING
  # ==========================================================================
  
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        name: "Python linting (Flake8)"
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
          - flake8-return
          - flake8-use-fstring
        args:
          - --max-line-length=88
          - --extend-ignore=E203,W503,F401
          - --per-file-ignores=__init__.py:F401,tests/*:D100,D101,D102,D103,D104
  
  - repo: https://github.com/pycqa/pylint
    rev: v3.0.3
    hooks:
      - id: pylint
        name: "Python analysis (Pylint)"
        args:
          - --disable=C0114,C0115,C0116  # Missing docstrings
          - --disable=R0903  # Too few public methods
          - --disable=W0613  # Unused argument
          - --max-line-length=88
        additional_dependencies:
          - pydantic
          - fastapi
          - sqlalchemy

  # ==========================================================================
  # PYTHON TYPE CHECKING
  # ==========================================================================
  
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: "Type checking (MyPy)"
        additional_dependencies:
          - types-requests
          - types-python-dateutil
          - types-PyYAML
          - types-redis
        args:
          - --ignore-missing-imports
          - --disallow-untyped-defs
          - --warn-return-any
          - --warn-unused-configs
        exclude: ^(tests/|migrations/|alembic/)

  # ==========================================================================
  # SECURITY SCANNING
  # ==========================================================================
  
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: "Security scanning (Bandit)"
        args: [-r, -f, json]
        exclude: ^tests/
  
  - repo: https://github.com/gitguardian/ggshield
    rev: v1.25.0
    hooks:
      - id: ggshield
        name: "Secret scanning (GitGuardian)"
        language: python
        stages: [commit]
        args: [secret, scan, pre-commit]

  # ==========================================================================
  # DOCUMENTATION
  # ==========================================================================
  
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: "Docstring style (pydocstyle)"
        args:
          - --convention=google
          - --add-ignore=D100,D104,D105,D107
        exclude: ^(tests/|migrations/|tools/scripts/)

  # ==========================================================================
  # YAML AND CONFIGURATION
  # ==========================================================================
  
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: "YAML linting (yamllint)"
        args:
          - --config-data
          - "{extends: default, rules: {line-length: {max: 120}, indentation: {spaces: 2}}}"

  # ==========================================================================
  # DOCKER AND CONTAINERS
  # ==========================================================================
  
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: "Dockerfile linting (Hadolint)"
        args: [--ignore, DL3008, --ignore, DL3009]

  # ==========================================================================
  # SHELL SCRIPTS
  # ==========================================================================
  
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: "Shell script analysis (ShellCheck)"
        args: [--severity=warning]

  # ==========================================================================
  # JSON AND MARKUP
  # ==========================================================================
  
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: "Format JSON, YAML, MD (Prettier)"
        types_or: [json, yaml, markdown]
        args: [--tab-width=2, --print-width=100]
        exclude: ^(poetry.lock|package-lock.json)

  # ==========================================================================
  # SECRETS AND SENSITIVE DATA
  # ==========================================================================
  
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: "Detect secrets"
        args:
          - --baseline
          - .secrets.baseline
          - --exclude-files
          - ".*\\.lock$"
          - --exclude-files
          - "poetry.lock"
          - --exclude-lines
          - "password.*=.*example"
        exclude: ^(\.secrets\.baseline|tests/.*fixtures/)

  # ==========================================================================
  # CUSTOM OASIS HOOKS
  # ==========================================================================
  
  - repo: local
    hooks:
      # Trading-specific validations
      - id: validate-trading-config
        name: "Validate trading configuration"
        entry: python tools/scripts/validate_config.py
        language: system
        files: ^(config/.*\.(yaml|yml|json)|\.env\..*|.*trading.*\.py)$
        pass_filenames: true
      
      # Check for TODO/FIXME in production code
      - id: check-todos
        name: "Check for TODO/FIXME"
        entry: 'grep -rn "TODO\|FIXME\|XXX\|HACK" --include="*.py" apps/ libs/'
        language: system
        pass_filenames: false
        always_run: false
        stages: [pre-push]
      
      # Ensure no debug prints in production code
      - id: check-debug-prints
        name: "Check for debug prints"
        entry: 'grep -rn "print(" --include="*.py" apps/ libs/ | grep -v "# debug ok" || true'
        language: system
        pass_filenames: false
        always_run: false
      
      # Check for proper exception handling
      - id: check-bare-except
        name: "Check for bare except clauses"
        entry: 'grep -rn "except:" --include="*.py" apps/ libs/ || true'
        language: system
        pass_filenames: false
        always_run: false
      
      # Validate database migrations
      - id: validate-migrations
        name: "Validate database migrations"
        entry: python -c "print('Migration validation placeholder')"
        language: system
        files: ^(alembic/versions/.*\.py|libs/infrastructure/database/.*)$
        pass_filenames: true

# =============================================================================
# PRE-COMMIT CONFIGURATION
# =============================================================================

default_stages: [commit]

# Hooks that should run on pre-push instead of pre-commit
# (for slower or more comprehensive checks)
repos_hooks_to_run_on_push:
  - check-todos
  - validate-trading-config

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================

default_language_version:
  python: python3.11
  node: '18'

# Files to exclude from all hooks
exclude: |
  (?x)^(
    .*\.min\.(js|css)|
    .*\.map|
    node_modules/.*|
    \.git/.*|
    \.pytest_cache/.*|
    \.mypy_cache/.*|
    __pycache__/.*|
    \.venv/.*|
    venv/.*|
    env/.*|
    build/.*|
    dist/.*|
    .*\.egg-info/.*|
    htmlcov/.*|
    \.coverage.*|
    logs/.*|
    backup.*\.sql
  )$

# =============================================================================
# MINIMUM VERSIONS
# =============================================================================

minimum_pre_commit_version: '3.6.0'

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================

# To install and use these hooks:
# 1. pip install pre-commit
# 2. pre-commit install
# 3. pre-commit run --all-files  # Optional: run on all files initially
# 4. git commit  # Hooks will run automatically
#
# To update hooks:
# pre-commit autoupdate
#
# To bypass hooks (not recommended):
# git commit --no-verify
#
# To run specific hook:
# pre-commit run <hook-id>
#
# To run hooks on specific files:
# pre-commit run --files file1.py file2.py